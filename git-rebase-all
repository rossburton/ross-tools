#! /bin/bash

# Copyright (C) 2015 Ross Burton <ross@burtonini.com>
# MIT licensed

set -eu

BLACKLIST=$(git config --get rebase-all.blacklist) || true
# Always blacklist master
#BLACKLIST="$BLACKLIST master"

COUNT=0
SKIPPED=0
FAILED=0

# report [colour code] [header] [message]
report() {
    COLOUR=$1
    HEADER=$2
    shift 2
    echo -e "$(tput setaf $COLOUR)$HEADER:$(tput sgr0) $*"

}

# Returns error if blacklisted
check_blacklisted() {
    NAME=$1
    for BL in $BLACKLIST; do
        if [ "$NAME" = "$BL" ]; then
            echo $NAME is blacklisted
            return 1
        fi
    done
    return 0
}

# Echo the upstream branch for $1, non-zero exit if none
get_upstream() {
    NAME=$1
    git rev-parse --abbrev-ref --symbolic-full-name $NAME@{upstream} 2>/dev/null
}

# 0 if $1 and $2 are the same SHA, 1 otherwise
is_same() {
    test $(git rev-parse $1) = $(git rev-parse $2)
}

# Rebase $1 to it's upstream branch
try_rebase() {
    NAME=$1
    UPSTREAM=$(get_upstream $NAME)
    if test -z $UPSTREAM; then
        report 3 SKIP $NAME has no upstream set
        SKIPPED=$((SKIPPED + 1))
        return 1
    fi
    git rebase --quiet $UPSTREAM $NAME 2>/dev/null
    if [ $? -eq 0 ] ; then
        if is_same $NAME $UPSTREAM; then
            report 6 MERGED $NAME is now $UPSTREAM
        else
            report 2 SUCCESS rebased $NAME to $UPSTREAM
        fi
        return 0
    else
        report 1 FAIL $NAME does not rebase to $UPSTREAM
        git rebase --abort
        FAILED=$((FAILED + 1))
        return 1
    fi
}

# 0 if the tree is dirty, 1 otherwise
is_dirty() {
    test -n "$(git status --porcelain)"
}


if is_dirty; then
    report 1 FAIL tree is dirty, refusing to rebase
    exit 1
fi

BRANCHES=$(git for-each-ref refs/heads --format='%(refname:strip=2)')
for NAME in $BRANCHES; do
    COUNT=$((COUNT + 1))
 
    check_blacklisted $NAME || continue
    try_rebase $NAME || :
done

git checkout --quiet master

echo
echo "Rebased $COUNT branches, $SKIPPED skipped, $FAILED didn't rebase successfully."

git branch --verbose
