#! /usr/bin/env python3

# Copyright (C) 2015-2024 Ross Burton <ross.burton@arm.com>
# MIT licensed

import argparse
import datetime
import itertools
import pathlib
import subprocess
import sys

import git
import imapclient

try:
    # 3.12 onwards
    from itertools import batched
except ImportError:
    def batched(iterable, n):
        if n < 1:
            raise ValueError('n must be at least one')
        iterator = iter(iterable)
        while batch := tuple(itertools.islice(iterator, n)):
            yield batch

BATCH_SIZE = 25

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(
    "branch",
    nargs="?",
    help="The branch to scan",
    default="origin/master",
)
parser.add_argument(
    "-r", "--repo", help="Repository to scan", type=pathlib.Path, default="."
)
parser.add_argument(
    "-c",
    "--commits",
    help="Number of commits back to go in history (-1 for all commits)",
    type=int,
    default=-1,
)
parser.add_argument(
    "-y",
    "--days",
    help="Number of days of email to search",
    type=int,
    default=30,
)
parser.add_argument(
    "-l", "--list", help="List patches found", action="store_true", default=False
)
# TODO use logging for verbose mode
parser.add_argument(
    "-v", "--verbose", help="Verbose mode", action="store_true", default=False
)
parser.add_argument(
    "-d", "--dryrun", help="Dry-run only", action="store_true", default=False
)
args = parser.parse_args()

verbose = args.verbose


def normalise(s):
    return " ".join(s.split())


def get_commits(repo, branch, num_commits):
    """
    Return the set of commit messages that are in the repository.
    """
    # TODO: this should use GitPython
    revlist = subprocess.Popen(
        "git -C %s log %s --format=oneline --max-count=%d" % (repo, branch, num_commits),
        shell=True,
        stdout=subprocess.PIPE,
    ).communicate()[0]
    revlist = revlist.decode("utf-8")
    revdata = set()
    for line in revlist.split("\n"):
        if not line:
            continue
        desc = normalise(line.split(" ", 1)[1])
        if verbose:
            print("Storing commit '%s'" % desc)
        revdata.add(desc)
    return revdata

def get_messages(server, config, days):
    folder = config.get("handlepatches", "folder")
    if verbose:
        print(f"Selecting {folder}")
    server.select_folder(folder)

    date_limit = datetime.datetime.now() - datetime.timedelta(days=days)
    if verbose:
        print(f"Search for messages since {date_limit}")
    messages = server.search(["UNSEEN", "SINCE", date_limit])
    if verbose:
        print(f"Found {len(messages)} messages")
    return messages

def match_messages(server, all_messages):
    for messages in batched(all_messages, BATCH_SIZE):
        if verbose:
            print("Fetching messages %s" % ", ".join((str(i) for i in messages)))

        try:
            response = server.fetch(messages, ["ENVELOPE"])
        except Exception as e:
            print(e)
            continue

        for msgid, data in response.items():
            if b"ENVELOPE" not in data:
                print("Skipping %s without ENVELOPE" % msgid)
                continue

            subject = normalise(data[b"ENVELOPE"].subject.decode("utf-8", errors="ignore"))
            if "]" in subject:
                subject = subject.rsplit("]", 1)[1].strip()

            if verbose:
                print("Searching for subject '%s'" % subject)
            if subject in revdata:
                if verbose or args.list:
                    print("Found match for %s" % subject)
                yield msgid


try:
    repo = git.Repo(args.repo)
except git.exc.InvalidGitRepositoryError:
    print("handlepatches wasn't ran inside a git clone, aborting")
    sys.exit(1)

config = repo.config_reader()
for option in ("imapserver", "imapuser", "imappassword"):
    if not config.has_option("handlepatches", option):
        print(f"Missing config option handlepatches.{option}")
        sys.exit(1)

revdata = get_commits(args.repo, args.branch, args.commits)
if verbose:
    print(f"Stored {len(revdata)} commits")

action = config.get("handlepatches", "action")
if action != "markread":
    print(f"Unhandled action {action}")
    sys.exit(1)

server = imapclient.IMAPClient(
    config.get("handlepatches", "imapserver"),
    port=config.getint("handlepatches", "imapport", fallback=993),
    ssl=config.getboolean("handlepatches", "ssl", fallback=True),
)
if verbose:
    print("Logging into IMAP...")
server.login(
    config.get("handlepatches", "imapuser"), config.get("handlepatches", "imappassword")
)

messages = get_messages(server, config, args.days)
messages = match_messages(server, messages)

if not args.dryrun:
    for msgs in batched(messages, BATCH_SIZE):
        if verbose:
            print(f"Setting SEEN flag on messages: {' '.join(str(i) for i in msgs)}")
        server.add_flags(msgs, imapclient.SEEN)
